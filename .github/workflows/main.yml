name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      changed_ngsh: 'true'
      skip_whole_workflow: 'false'
      skip_ai: 'false'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read version
        id: read_version
        run: |
          echo "version_final=v6.4.1" >> $GITHUB_OUTPUT

      - name: Call custom AI API
        if: env.changed_ngsh == 'true' && env.skip_whole_workflow != 'true' && env.skip_ai == 'false'
        run: |
          diff_text="Some git diff here..."

          diff_json=$(jq -Rs . <<< "$diff_text")

          json_payload=$(jq -n \
            --arg system_msg "請用繁體中文，根據以下 diff 寫出 changelog 條列，不要開場白、不要說明文字、也不要提到版本更新，也不要提到 diff，僅條列變更項目，簡短扼要。" \
            --arg user_msg "$diff_text" \
            '{
              model: "deepseek/deepseek-chat-v3-0324:free",
              messages: [
                {"role": "system", "content": $system_msg},
                {"role": "user", "content": $user_msg}
              ]
            }')

          curl -s -X POST $AI_API_URL \
            -H "Authorization: Bearer $AI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$json_payload" > response.json

          summary=$(jq -r '.choices[0].message.content // "AI 回傳空結果"' response.json)

          # 存到檔案，讓後續都用 cat 讀
          echo "$summary" > summary.txt

          # 同時 export 給後續 steps
          echo "summary<<EOF" >> $GITHUB_ENV
          echo "$summary" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Show Release Note
        if: env.changed_ngsh == 'true' && env.skip_whole_workflow != 'true'
        run: |
          echo "最終版本號: ${{ steps.read_version.outputs.version_final }}"
          echo "--- Summary ---"
          cat summary.txt

      - name: Send Telegram Message
        if: env.changed_ngsh == 'true' && env.skip_whole_workflow != 'true' && env.skip_ai == 'false'
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          VERSION="${{ steps.read_version.outputs.version_final }}"
          SUMMARY=$(cat summary.txt)

          MESSAGE_BODY="$VERSION\n\n$SUMMARY"

          # curl --data-urlencode 自動處理換行與特殊字元
          curl -s -X POST "https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage" \
            --data-urlencode "chat_id=$TG_CHAT_ID" \
            --data-urlencode "text=$MESSAGE_BODY" \
            --data-urlencode "parse_mode=Markdown"

      - name: Create git tag
        if: env.changed_ngsh == 'true' && env.skip_whole_workflow != 'true' && env.skip_ai == 'false'
        run: |
          git tag ${{ steps.read_version.outputs.version_final }}
          git push origin ${{ steps.read_version.outputs.version_final }}

      - name: Create GitHub Release
        if: env.changed_ngsh == 'true' && env.skip_whole_workflow != 'true' && env.skip_ai == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.read_version.outputs.version_final }}
          name: ${{ steps.read_version.outputs.version_final }}
          body_path: summary.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
